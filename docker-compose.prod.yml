services:
  db:
    image: postgres:17-alpine
    container_name: mindtrace-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Não expor porta 5432 externamente em produção

  # (Opcional - remova em produção final ou limite via SG)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-server
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-change_me}
    depends_on:
      - db
    ports:
      - "8001:80"  # Considere remover ou restringir IP no SG

  backend:
    image: ${DOCKER_HUB_USERNAME:-shh4und}/mindtrace-backend:latest
    container_name: mindtrace-backend
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8080:8080" # expõe só internamente à rede compose

  frontend:
    image: ${DOCKER_HUB_USERNAME:-shh4und}/mindtrace-frontend:latest
    container_name: mindtrace-frontend
    depends_on:
      - backend
    restart: unless-stopped
    ports:
      - "80:80"  # ÚNICA porta pública (HTTP)
    environment:
      # Apenas se você implementar lógica de leitura via JS de window.__APP_CONFIG__ etc.
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}

networks:
  default:
    name: mindtrace-net